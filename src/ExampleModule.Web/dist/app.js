!function(e){var t={};function o(r){if(t[r])return t[r].exports;var l=t[r]={i:r,l:!1,exports:{}};return e[r].call(l.exports,l,l.exports,o),l.l=!0,l.exports}o.m=e,o.c=t,o.d=function(e,t,r){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var l in e)o.d(r,l,function(t){return e[t]}.bind(null,l));return r},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,o){o(1),o(2),e.exports=o(3)},function(e,t){void 0!==AppDependencies&&AppDependencies.push("example"),angular.module("example",[]).config(["$stateProvider",function(e){e.state("workspace.exampleState",{url:"/example",templateUrl:"$(Platform)/Scripts/common/templates/home.tpl.html",controller:["platformWebApp.bladeNavigationService",function(e){e.showBlade({id:"blade1",controller:"example.helloWorldController",template:"Modules/$(example)/Scripts/blades/hello-world.html",isClosingDisabled:!0})}]})}]).run(["platformWebApp.mainMenuService","platformWebApp.widgetService","$state",function(e,t,o){var r={path:"browse/example",icon:"fa fa-cube",title:"ExampleModule",priority:100,action:function(){o.go("workspace.exampleState")},permission:"example:access"};e.addMenuItem(r)}])},function(e,t){angular.module("example").controller("example.helloWorldController",["$scope","example.webApi",function(e,t){var o=e.blade;o.title="ExampleModule",o.refresh=function(){t.get((function(e){o.title="example.blades.hello-world.title",o.data=e.result,o.isLoading=!1}))},o.refresh()}])},function(e,t){angular.module("example").factory("example.webApi",["$resource",function(e){return e("api/Example")}])}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,